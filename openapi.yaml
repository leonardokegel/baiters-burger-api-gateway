openapi: "3.0.1"
info:
  title: "API Baiters Burger"
  description: "API para gerenciar clientes, produtos e pedidos."
  version: "1.0.0"

tags:
  - name: "Customers"
  - name: "Products"
  - name: "Orders"

paths:
  /api/v1/customers:
    post:
      tags: [Customers]
      summary: "Cadastra um novo cliente"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerInput"
            examples:
              default:
                $ref: "#/components/examples/NewCustomer"
      responses:
        "201":
          description: "Cliente criado com sucesso"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{"statusCode": 201}'
        responses:
          default:
            statusCode: "201"
            responseTemplates:
              application/json: '{"message": "Mock: Recurso criado com sucesso."}'

  /api/v1/customers/{cpf}:
    get:
      tags: [Customers]
      summary: "Busca um cliente pelo CPF"
      parameters:
        - name: "cpf"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Dados do cliente"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
              examples:
                default:
                  $ref: "#/components/examples/CustomerResponse"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: '{"message": "Mock: Operação realizada com sucesso."}'

  /api/v1/products:
    post:
      tags: [Products]
      summary: "Cadastra um novo produto"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
            examples:
              default:
                $ref: "#/components/examples/NewProduct"
      responses:
        "201":
          description: "Produto criado com sucesso"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{"statusCode": 201}'
        responses:
          default:
            statusCode: "201"
            responseTemplates:
              application/json: '{"message": "Mock: Recurso criado com sucesso."}'
    get:
      tags: [Products]
      summary: "Lista produtos por categoria"
      parameters:
        - name: "category"
          in: "query"
          required: false
          schema:
            type: "string"
            enum: [BURGERS, SIDE_DISHES, DRINKS, DESSERTS]
      responses:
        "200":
          description: "Lista de produtos"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
              examples:
                default:
                  $ref: "#/components/examples/ProductListResponse"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: '{"message": "Mock: Operação realizada com sucesso."}'

  /api/v1/products/{product_id}:
    get:
      tags: [Products]
      summary: "Busca um produto pelo ID"
      parameters:
        - name: "product_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Dados do produto"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
              examples:
                default:
                  $ref: "#/components/examples/ProductResponse"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: '{"message": "Mock: Operação realizada com sucesso."}'
    put:
      tags: [Products]
      summary: "Atualiza um produto existente"
      parameters:
        - name: "product_id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
            examples:
              default:
                $ref: "#/components/examples/NewProduct"
      responses:
        "200":
          description: "Produto atualizado com sucesso"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: '{"message": "Mock: Operação realizada com sucesso."}'

  /api/v1/orders:
    post:
      tags: [Orders]
      summary: "Cria um novo pedido"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderInput"
            examples:
              default:
                $ref: "#/components/examples/NewOrder"
      responses:
        "201":
          description: "Pedido criado com sucesso"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{"statusCode": 201}'
        responses:
          default:
            statusCode: "201"
            responseTemplates:
              application/json: '{"message": "Mock: Recurso criado com sucesso."}'
    get:
      tags: [Orders]
      summary: "Lista os pedidos por status"
      parameters:
        - name: "status"
          in: "query"
          required: false
          schema:
            type: "string"
            enum: [REQUESTED, RECEIVED, PREPARING, READY, DELIVERED]
      responses:
        "200":
          description: "Lista de pedidos"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Order"
              examples:
                default:
                  $ref: "#/components/examples/OrderListResponse"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: '{"message": "Mock: Operação realizada com sucesso."}'

  /api/v1/orders/{order_id}:
    patch:
      tags: [Orders]
      summary: "Atualiza o status de um pedido"
      parameters:
        - name: "order_id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderStatusInput"
            examples:
              default:
                $ref: "#/components/examples/UpdateStatus"
      responses:
        "200":
          description: "Pedido atualizado com sucesso"
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: '{"message": "Mock: Operação realizada com sucesso."}'

components:
  schemas:
    Customer:
      type: "object"
      properties:
        cpf: { type: "string" }
        name: { type: "string" }
        email: { type: "string", format: "email" }
    CustomerInput:
      type: "object"
      required: [name, cpf, email]
      properties:
        name: { type: "string" }
        cpf: { type: "string" }
        email: { type: "string", format: "email" }
    Product:
      type: "object"
      properties:
        productName: { type: "string" }
        category: { type: "string" }
        price: { type: "number", format: "float" }
        description: { type: "string" }
        imagesUrls:
          type: "array"
          items: { type: "string", format: "uri" }
    ProductInput:
      type: "object"
      required: [productName, category, price, description]
      properties:
        productName: { type: "string" }
        category: { type: "string" }
        price: { type: "number", format: "float" }
        description: { type: "string" }
        imagesUrls:
          type: "array"
          items: { type: "string", format: "uri" }
    OrderInput:
      type: "object"
      required: [productsIds]
      properties:
        productsIds:
          type: "array"
          items: { type: "string" }
        customerCpf: { type: "string" }
    UpdateOrderStatusInput:
      type: "object"
      required: [status]
      properties:
        status:
          type: "string"
          enum: [REQUESTED, RECEIVED, PREPARING, READY, DELIVERED]
    OrderProduct:
      type: "object"
      properties:
        productName: { type: "string" }
        category: { type: "string" }
        description: { type: "string" }
    Order:
      type: "object"
      properties:
        id: { type: "string" }
        totalPrice: { type: "number", format: "float" }
        status: { type: "string" }
        products:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderProduct"
        createdAt: { type: "string", format: "date-time" }
        name: { type: "string" }

  examples:
    NewCustomer:
      summary: Exemplo de body para criar um novo cliente
      value:
        name: "mirna"
        cpf: "48481743844"
        email: "mirna@gmail.com"
    CustomerResponse:
      summary: Exemplo de retorno para um cliente
      value:
        cpf: "48481743844"
        name: "mirna"
        email: "mirna@gmail.com"
    NewProduct:
      summary: Exemplo de body para criar um novo produto
      value:
        productName: "Produto 23"
        category: "BURGERS"
        price: 100.00
        description: "burguer 2 exemplo"
        imagesUrls: ["http://example.com/image1.jpg"]
    ProductResponse:
      summary: Exemplo de retorno para um único produto
      value:
        productName: "X-Burger"
        category: "BURGERS"
        price: 0.01
        description: "Product Description"
        imagesUrls: ["http://example.com/image1.jpg"]
    ProductListResponse:
      summary: Exemplo de retorno para uma lista de produtos
      value:
        - productName: "X-Burger"
          category: "BURGERS"
          price: 0.01
          description: "Product Description"
          imagesUrls: ["http://example.com/image1.jpg"]
        - productName: "X-Everything"
          category: "BURGERS"
          price: 0.01
          description: "p"
          imagesUrls: ["http://example.com/image1.jpg"]
    NewOrder:
      summary: Exemplo de body para criar um novo pedido
      value:
        productsIds: ["683a3be2eea4980451cfad26", "683a3c04eea4980451cfad27"]
        customerCpf: "41003884032"
    UpdateStatus:
      summary: Exemplo de body para atualizar o status de um pedido
      value:
        status: "PREPARING"
    OrderListResponse:
      summary: Exemplo de retorno para uma lista de pedidos
      value:
        - id: "68895ec6e6b7565abfa6c833"
          totalPrice: 0.02
          status: "READY"
          products:
            - {
                productName: "X-Burger",
                category: "BURGERS",
                description: "Product Description",
              }
            - {
                productName: "X-Salad",
                category: "BURGERS",
                description: "Product Description",
              }
          createdAt: "2025-07-29T20:52:38.067Z"
          name: "Daniel Ferreira"
