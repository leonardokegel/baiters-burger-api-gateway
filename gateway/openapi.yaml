openapi: "3.1.1"
info:
    title: "API Baiters Burger"
    description: "API para gerenciar clientes, produtos e pedidos."
    version: "1.0.0"

x-amazon-apigateway-request-validator: "all"

tags:
    - name: "Customers"
    - name: "Products"
    - name: "Orders"
    - name: "Webhook"
    - name: "Auth"

paths:
    /api/v1/customers:
        post:
            tags: [Customers]
            summary: "Cadastra um novo cliente"
            security:
                - LambdaJWTAuthorizer: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CustomerInput"
                        examples:
                            default:
                                $ref: "#/components/examples/NewCustomer"
            responses:
                "201":
                    description: "Cliente criado com sucesso"
            x-amazon-apigateway-integration:
                type: "http_proxy"
                httpMethod: "POST"
                uri: "http://${nlb_dns_name}/api/v1/customers"
                connectionType: "VPC_LINK"
                connectionId: "${vpc_link_id}"
                passthroughBehavior: "when_no_match"

    /api/v1/customers/{cpf}:
        get:
            tags: [Customers]
            summary: "Busca um cliente pelo CPF"
            security:
                - LambdaJWTAuthorizer: []
            parameters:
                - name: "cpf"
                  in: "path"
                  required: true
                  schema:
                      type: "string"
            responses:
                "200":
                    description: "Dados do cliente"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Customer"
                            examples:
                                default:
                                    $ref: "#/components/examples/CustomerResponse"
            x-amazon-apigateway-integration:
                type: "http_proxy"
                httpMethod: "GET"
                uri: "http://${nlb_dns_name}/api/v1/customers/{cpf}"
                connectionType: "VPC_LINK"
                connectionId: "${vpc_link_id}"
                passthroughBehavior: "when_no_match"
                requestParameters:
                    integration.request.path.cpf: "method.request.path.cpf"

    /api/v1/products:
        post:
            tags: [Products]
            summary: "Cadastra um novo produto"
            security:
                - LambdaJWTAuthorizer: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ProductInput"
                        examples:
                            default:
                                $ref: "#/components/examples/NewProduct"
            responses:
                "201":
                    description: "Produto criado com sucesso"
            x-amazon-apigateway-integration:
                type: "http_proxy"
                httpMethod: "POST"
                uri: "http://${nlb_dns_name}/api/v1/products"
                connectionType: "VPC_LINK"
                connectionId: "${vpc_link_id}"
                passthroughBehavior: "when_no_match"
        get:
            tags: [Products]
            summary: "Lista produtos por categoria"
            security:
                - LambdaJWTAuthorizer: []
            parameters:
                - name: "category"
                  in: "query"
                  required: false
                  schema:
                      type: "string"
                      enum: [BURGERS, SIDE_DISHES, DRINKS, DESSERTS]
            responses:
                "200":
                    description: "Lista de produtos"
                    content:
                        application/json:
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Product"
                            examples:
                                default:
                                    $ref: "#/components/examples/ProductListResponse"
            x-amazon-apigateway-integration:
                type: "http_proxy"
                httpMethod: "GET"
                uri: "http://${nlb_dns_name}/api/v1/products"
                connectionType: "VPC_LINK"
                connectionId: "${vpc_link_id}"
                passthroughBehavior: "when_no_match"

    /api/v1/products/{product_id}:
        get:
            tags: [Products]
            summary: "Busca um produto pelo ID"
            security:
                - LambdaJWTAuthorizer: []
            parameters:
                - name: "product_id"
                  in: "path"
                  required: true
                  schema:
                      type: "string"
            responses:
                "200":
                    description: "Dados do produto"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Product"
                            examples:
                                default:
                                    $ref: "#/components/examples/ProductResponse"
            x-amazon-apigateway-integration:
                type: "http_proxy"
                httpMethod: "GET"
                uri: "http://${nlb_dns_name}/api/v1/products/{product_id}"
                connectionType: "VPC_LINK"
                connectionId: "${vpc_link_id}"
                passthroughBehavior: "when_no_match"
                requestParameters:
                    integration.request.path.product_id: "method.request.path.product_id"
        put:
            tags: [Products]
            summary: "Atualiza um produto existente"
            security:
                - LambdaJWTAuthorizer: []
            parameters:
                - name: "product_id"
                  in: "path"
                  required: true
                  schema:
                      type: "string"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ProductInput"
                        examples:
                            default:
                                $ref: "#/components/examples/NewProduct"
            responses:
                "200":
                    description: "Produto atualizado com sucesso"
            x-amazon-apigateway-integration:
                type: "http_proxy"
                httpMethod: "PUT"
                uri: "http://${nlb_dns_name}/api/v1/products/{product_id}"
                connectionType: "VPC_LINK"
                connectionId: "${vpc_link_id}"
                passthroughBehavior: "when_no_match"
                requestParameters:
                    integration.request.path.product_id: "method.request.path.product_id"
        delete:
            tags: [Products]
            summary: "Deleta um produto existente"
            security:
                - LambdaJWTAuthorizer: []
            parameters:
                - name: "product_id"
                  in: "path"
                  required: true
                  schema:
                      type: "string"
            responses:
                "204":
                    description: "Produto deletado com sucesso"
            x-amazon-apigateway-integration:
                type: "http_proxy"
                httpMethod: "DELETE"
                uri: "http://${nlb_dns_name}/api/v1/products/{product_id}"
                connectionType: "VPC_LINK"
                connectionId: "${vpc_link_id}"
                passthroughBehavior: "when_no_match"
                requestParameters:
                    integration.request.path.product_id: "method.request.path.product_id"

    /api/v1/orders:
        post:
            tags: [Orders]
            summary: "Cria um novo pedido"
            security:
                - LambdaJWTAuthorizer: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/OrderInput"
                        examples:
                            default:
                                $ref: "#/components/examples/NewOrder"
            responses:
                "201":
                    description: "Pedido criado com sucesso"
            x-amazon-apigateway-integration:
                type: "http_proxy"
                httpMethod: "POST"
                uri: "http://${nlb_dns_name}/api/v1/orders"
                connectionType: "VPC_LINK"
                connectionId: "${vpc_link_id}"
                passthroughBehavior: "when_no_match"
        get:
            tags: [Orders]
            summary: "Lista todos os pedidos"
            security:
                - LambdaJWTAuthorizer: []
            responses:
                "200":
                    description: "Lista de pedidos"
                    content:
                        application/json:
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Order"
                            examples:
                                default:
                                    $ref: "#/components/examples/OrderListResponse"
            x-amazon-apigateway-integration:
                type: "http_proxy"
                httpMethod: "GET"
                uri: "http://${nlb_dns_name}/api/v1/orders"
                connectionType: "VPC_LINK"
                connectionId: "${vpc_link_id}"
                passthroughBehavior: "when_no_match"

    /api/v1/orderstatus/{status}:
        get:
            tags: [Orders]
            summary: "Lista os pedidos por status (endpoint alternativo)"
            security:
                - LambdaJWTAuthorizer: []
            parameters:
                - name: "status"
                  in: "path"
                  required: true
                  schema:
                      type: "string"
                      enum: [REQUESTED, RECEIVED, PREPARING, READY, DELIVERED]
            responses:
                "200":
                    description: "Lista de pedidos que estão no status especificado"
                    content:
                        application/json:
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/Order"
                            examples:
                                default:
                                    $ref: "#/components/examples/OrderListResponse"
            x-amazon-apigateway-integration:
                type: "http_proxy"
                httpMethod: "GET"
                uri: "http://${nlb_dns_name}/api/v1/orderstatus/{status}"
                connectionType: "VPC_LINK"
                connectionId: "${vpc_link_id}"
                passthroughBehavior: "when_no_match"
                requestParameters:
                    integration.request.path.status: "method.request.path.status"

    /api/v1/orders/{order_id}:
        patch:
            tags: [Orders]
            summary: "Atualiza o status de um pedido"
            security:
                - LambdaJWTAuthorizer: []
            parameters:
                - name: "order_id"
                  in: "path"
                  required: true
                  schema:
                      type: "string"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateOrderStatusInput"
                        examples:
                            default:
                                $ref: "#/components/examples/UpdateStatus"
            responses:
                "200":
                    description: "Pedido atualizado com sucesso"
            x-amazon-apigateway-integration:
                type: "http_proxy"
                httpMethod: "PATCH"
                uri: "http://${nlb_dns_name}/api/v1/orders/{order_id}"
                connectionType: "VPC_LINK"
                connectionId: "${vpc_link_id}"
                passthroughBehavior: "when_no_match"
                requestParameters:
                    integration.request.path.order_id: "method.request.path.order_id"

    /api/v1/webhook:
        post:
            tags: [Orders, Webhook]
            summary: "Endpoint para webhook do MercadoPago"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/WebhookInput"
                        examples:
                            default:
                                $ref: "#/components/examples/WebhookInput"
            responses:
                "200":
                    description: "Webhook chamado com sucesso"
            x-amazon-apigateway-integration:
                type: "http_proxy"
                httpMethod: "POST"
                uri: "http://${nlb_dns_name}/webhook"
                connectionType: "VPC_LINK"
                connectionId: "${vpc_link_id}"
                passthroughBehavior: "when_no_match"

    # /api/v1/login:
    #     post:
    #         tags: ["Auth"]
    #         summary: "Endpoint para login de funcionários"
    #         requestBody:
    #             required: true
    #             content:
    #                 application/json:
    #                     schema:
    #                         $ref: "#/components/schemas/LoginInput"
    #                     examples:
    #                         default:
    #                             $ref: "#/components/examples/LoginInput"
    #         responses:
    #             "200":
    #                 description: "Login realizado com sucesso"
    #                 content:
    #                     application/json:
    #                         schema:
    #                             type: "object"
    #                             properties:
    #                                 token: { type: "string" }
    #                                 expiresIn: { type: "number" }
    #         x-amazon-apigateway-integration:
    #             uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${auth_lambda_arn}/invocations"
    #             passthroughBehavior: "when_no_match"
    #             httpMethod: "POST"
    #             type: "aws_proxy"
    #             credentials: "${lambda_execution_role_arn}"

components:
    schemas:
        Customer:
            $ref: "./schemas/customer.yaml"

        CustomerInput:
            $ref: "./schemas/customer-input.yaml"

        Product:
            $ref: "./schemas/product.yaml"

        ProductInput:
            $ref: "./schemas/product-input.yaml"

        WebhookInput:
            $ref: "./schemas/webhook-input.yaml"

        OrderInput:
            $ref: "./schemas/order-input.yaml"

        UpdateOrderStatusInput:
            $ref: "./schemas/update-orderstatus-input.yaml"

        OrderProduct:
            $ref: "./schemas/order-product.yaml"

        Order:
            $ref: "./schemas/order.yaml"

        LoginInput:
            $ref: "./schemas/login-input.yaml"

    examples:
        NewCustomer:
            $ref: "./examples/new-customer.yaml"

        CustomerResponse:
            $ref: "./examples/customer-response.yaml"

        NewProduct:
            $ref: "./examples/new-product.yaml"

        ProductResponse:
            $ref: "./examples/product-response.yaml"

        ProductListResponse:
            $ref: "./examples/product-list-response.yaml"

        WebhookInput:
            $ref: "./examples/webhook-input.yaml"

        NewOrder:
            $ref: "./examples/new-order.yaml"

        UpdateStatus:
            $ref: "./examples/update-status.yaml"

        OrderListResponse:
            $ref: "./examples/order-list-response.yaml"

        LoginInput:
            $ref: "./examples/login-input.yaml"

    x-amazon-apigateway-request-validators:
        all:
            validateRequestBody: true
            validateRequestParameters: true

    securitySchemes:
        LambdaJWTAuthorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
                type: "token"
                authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${lambda_authorizer_arn}/invocations"
